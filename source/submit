#!/usr/bin/env python

import argparse
import glob
import json
import os
import requests
import paramiko
import scp
import sys

parser = argparse.ArgumentParser(description='submit a batch to the wjc, instance types can be found here: http://aws.amazon.com/ec2/instance-types/.')

parser.add_argument('-M', '--email', help='e-mail address to send status updates to', default='')
parser.add_argument('-m', '--mail', help='when to send e-mail', default='sf')
parser.add_argument('server', help='specifiy the web server address')
parser.add_argument('username', help='specifiy username for connecting with the server')
parser.add_argument('key_file', help='specifiy key file for connecting with the server')
parser.add_argument('ami', help='ami id')
parser.add_argument('instance_type', help='AWS instance type')
parser.add_argument('max_nodes', help='maximum number of nodes for the batch')
parser.add_argument('directories', help="specify which directories to upload as a list of strings "
                                        "(ex: ['/tmp/test','/tmp/*bla*'], note: single quote!, "
                                        "each directory or all sub-directories must contain a 'run' script")


args = parser.parse_args()

args = args.__dict__

data = json.dumps({
                   'ami'           : args['ami'],
                   'instance_type' : args['instance_type'],
                   'email'         : args['email'],
									 'mail'          : args['mail']})

r = requests.post('http://%s/wjc/batch/%s' % (args['server'], (args['max_nodes'])),
                  headers={
                    'Content-Type': 'application/json',
                    'User-agent': 'Luke/1.0'
                  },
                  data=data)

batch_id = r.content[1:-1]
print 'your batch id is : %s' % batch_id
actual_directories = []
for dir_path in eval(args['directories']):
    actual_directories.extend(glob.glob(dir_path))

with paramiko.SSHClient() as ssh:
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(hostname=args['server'], username=args['username'], key_filename=args['key_file'])
    with scp.SCPClient(ssh.get_transport()) as sscp:
        ssh.exec_command('mkdir %s'% batch_id)
        for directory in actual_directories:
            print "processing " + directory
            directory = directory.replace('\\\\', '/')
            directory = directory.replace('\\', '/')
            if os.path.isdir(directory):
                if os.path.isfile(os.path.join(directory, 'run')):
                    remote_dir = '%s/job-%s/' % (batch_id, os.path.basename(os.path.normpath(directory)))
                    ssh.exec_command('mkdir %s' % remote_dir)
                    print 'S1. syncing %s to %s/job-%s/' % (directory, batch_id, os.path.basename(os.path.normpath(directory)))
                    here = os.getcwd()
                    os.chdir(directory)
                    sscp.put('.', remote_dir, recursive=True)
                    os.chdir(here)
                else:
                    os.chdir(directory)
                    for subdir in os.listdir('.'):
                        if os.path.isfile(os.path.join(subdir, 'run')):
                            remote_subdir = '%s/job-%s/' % (batch_id, os.path.basename(os.path.normpath(subdir)))
                            ssh.exec_command('mkdir %s' % remote_subdir)
                            print 'S2. syncing %s to %s/job-%s/' % (subdir, batch_id, os.path.basename(os.path.normpath(subdir)))
                            here = os.getcwd()
                            os.chdir(subdir)
                            sscp.put('.', remote_subdir, recursive=True)
                            os.chdir(here)
r = requests.post('http://%s/wjc/batch/%s/state/uploaded' % (args['server'], batch_id), headers={'User-agent': 'Luke/1.0'})
print r.content
