#!/usr/bin/env python

import argparse
import os
import shutil

import paramiko
import scp
import os.path

parser = argparse.ArgumentParser(description='retrieve a directory from the store')

parser.add_argument('server', help='specifiy the webserver address')
parser.add_argument('username', help='specifiy username for connecting with the server')
parser.add_argument('key_file', help='specifiy key file for connecting with the server')
parser.add_argument('batch_id', help='batch to download')
parser.add_argument('path', help='path to download to')
parser.add_argument('--only', help='if specified, only download files matching this pattern')
parser.add_argument('--clean', type=bool, help='if specified, clean up filenames', default=False)

args = parser.parse_args()

args = args.__dict__

if not os.path.isdir(args['path']):
    raise Exception('Directory does not exist ' + args['path'])
with paramiko.SSHClient() as ssh:
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(hostname=args['server'], username=args['username'], key_filename=args['key_file'])
    with scp.SCPClient(ssh.get_transport()) as sscp:
        if args['only'] is not None:
            # retrieve a file list with matching files
            _, stdout, _ = ssh.exec_command('find %s -name "%s"' % (args['batch_id'], args['only']))
            remote_files = stdout.read().splitlines()
            for remote_file in remote_files:
                # prepend the local path with the destination directory
                local_file = os.path.join(args['path'], remote_file)

                # remove "job-" and "_n" parts
                local_file_dirs = local_file.split('/')
                job_dir = local_file_dirs[2]
                job_dir = job_dir[4:str.rfind(job_dir, '_')]
                local_file_dirs[2] = job_dir
                local_file = '/'.join(local_file_dirs)

                # make sure that the local destination directory exists;
                # create it if necessary
                dirname = os.path.dirname(local_file)
                try:
                    os.makedirs(dirname)
                except OSError:
                    print("Warning: target directory exists.")
                # and finally, get the file or directory (recursively)
                print " %s -> %s " %  (remote_file, local_file)
                sscp.get(remote_file, local_file, recursive=True)
        else:
            sscp.get(args['batch_id'], args['path'], recursive=True)

if args['only'] is None and args['clean']:
    for source_directory in os.listdir(os.path.join(args['path'], args['batch_id'])):
        # Clean "job-" prefix and "_1" (bumboo) postfix from directory to form the local target directory.
        target_directory = source_directory[4:str.rfind(source_directory, '_')]
        shutil.move(os.path.join(args['path'], args['batch_id'], source_directory), os.path.join(args['path'], args['batch_id'], target_directory))

print 'download done to %s' % args['path']
